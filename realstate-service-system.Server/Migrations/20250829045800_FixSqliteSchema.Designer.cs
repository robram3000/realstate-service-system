// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using realstate_service_system.Server.Data;

#nullable disable

namespace realstate_service_system.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250829045800_FixSqliteSchema")]
    partial class FixSqliteSchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("realstate_service_system.Server.Models.Entities.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AgentId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("MemberId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentDate");

                    b.HasIndex("MemberId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("ClientId", "AppointmentDate");

                    b.HasIndex("AgentId", "AppointmentDate", "StartTime");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("realstate_service_system.Server.Models.Entities.Members.Member", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailVerified")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProfilePictureUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("VerificationToken")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.HasIndex("Role");

                    b.ToTable("Users");

                    b.HasDiscriminator<int>("Role").HasValue(1);

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = new Guid("f548ad3b-acc3-41f9-927d-97ec8d6fd777"),
                            CreatedAt = new DateTime(2025, 8, 29, 4, 57, 59, 201, DateTimeKind.Utc).AddTicks(4859),
                            Email = "admin@realstate.com",
                            EmailVerified = true,
                            FirstName = "System",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Administrator",
                            PasswordHash = "hashed_password_here",
                            PhoneNumber = "+1234567890",
                            ProfilePictureUrl = "",
                            Role = 0,
                            VerificationToken = ""
                        });
                });

            modelBuilder.Entity("realstate_service_system.Server.Models.Entities.PropertyViewing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientFeedback")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ClientRating")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ViewingDate")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("ViewingTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.HasIndex("ViewingDate");

                    b.HasIndex("ClientId", "PropertyId");

                    b.ToTable("PropertyViewings");
                });

            modelBuilder.Entity("realstate_service_system.Server.Models.Entities.RealstateProperties.Property", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("AgentId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Bathrooms")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Bedrooms")
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("TEXT");

                    b.Property<int?>("Floor")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasBalcony")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasElevator")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasGarden")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasParking")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasPool")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasSecurity")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("LotSize")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MonthlyRent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PropertyType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("SquareFootage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int?>("TotalFloors")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("YearBuilt")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("Price");

                    b.HasIndex("PropertyType");

                    b.HasIndex("Address", "City")
                        .IsUnique();

                    b.HasIndex("City", "Status");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("realstate_service_system.Server.Models.Entities.RealstateProperties.PropertyImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AltText")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.HasIndex("PropertyId", "IsPrimary");

                    b.ToTable("PropertyImages");
                });

            modelBuilder.Entity("realstate_service_system.Server.Models.Entities.Members.Agent", b =>
                {
                    b.HasBaseType("realstate_service_system.Server.Models.Entities.Members.Member");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CommissionRate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Languages")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("YearsOfExperience")
                        .HasColumnType("INTEGER");

                    b.HasIndex("LicenseNumber")
                        .IsUnique();

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("realstate_service_system.Server.Models.Entities.Members.Client", b =>
                {
                    b.HasBaseType("realstate_service_system.Server.Models.Entities.Members.Member");

                    b.Property<decimal>("Budget")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("GardenRequired")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MinimumBathrooms")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MinimumBedrooms")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("ParkingRequired")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PreferredLocation")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("PropertyTypePreference")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("realstate_service_system.Server.Models.Entities.Appointment", b =>
                {
                    b.HasOne("realstate_service_system.Server.Models.Entities.Members.Member", "Agent")
                        .WithMany("AppointmentsAsAgent")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("realstate_service_system.Server.Models.Entities.Members.Member", "Client")
                        .WithMany("AppointmentsAsClient")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("realstate_service_system.Server.Models.Entities.Members.Member", null)
                        .WithMany("Appointments")
                        .HasForeignKey("MemberId");

                    b.HasOne("realstate_service_system.Server.Models.Entities.RealstateProperties.Property", "Property")
                        .WithMany("Appointments")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("Client");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("realstate_service_system.Server.Models.Entities.PropertyViewing", b =>
                {
                    b.HasOne("realstate_service_system.Server.Models.Entities.Members.Member", "Client")
                        .WithMany("PropertyViewings")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("realstate_service_system.Server.Models.Entities.RealstateProperties.Property", "Property")
                        .WithMany("Viewings")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("realstate_service_system.Server.Models.Entities.RealstateProperties.Property", b =>
                {
                    b.HasOne("realstate_service_system.Server.Models.Entities.Members.Member", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("realstate_service_system.Server.Models.Entities.Members.Member", "Owner")
                        .WithMany("Properties")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("realstate_service_system.Server.Models.Entities.RealstateProperties.PropertyImage", b =>
                {
                    b.HasOne("realstate_service_system.Server.Models.Entities.RealstateProperties.Property", "Property")
                        .WithMany("Images")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("realstate_service_system.Server.Models.Entities.Members.Member", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("AppointmentsAsAgent");

                    b.Navigation("AppointmentsAsClient");

                    b.Navigation("Properties");

                    b.Navigation("PropertyViewings");
                });

            modelBuilder.Entity("realstate_service_system.Server.Models.Entities.RealstateProperties.Property", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Images");

                    b.Navigation("Viewings");
                });
#pragma warning restore 612, 618
        }
    }
}
